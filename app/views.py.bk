from flask import render_template
from flask_appbuilder.models.sqla.interface import SQLAInterface
from flask_appbuilder import ModelView, ModelRestApi
from flask_appbuilder import AppBuilder, expose, BaseView
from flask_appbuilder import has_access


from .models import ContactGroup, Contact
from . import appbuilder, db

"""
    Create your Model based REST API::

    class MyModelApi(ModelRestApi):
        datamodel = SQLAInterface(MyModel)

    appbuilder.add_api(MyModelApi)


    Create your Views::


    class MyModelView(ModelView):
        datamodel = SQLAInterface(MyModel)


    Next, register your Views::


    appbuilder.add_view(
        MyModelView,
        "My View",
        icon="fa-folder-open-o",
        category="My Category",
        category_icon='fa-envelope'
    )
"""

"""
    Application wide 404 error handler
"""


@appbuilder.app.errorhandler(404)
def page_not_found(e):
    return (
        render_template(
            "404.html", base_template=appbuilder.base_template, appbuilder=appbuilder
        ),
        404,
    )


#db.create_all()

#class MyView(BaseView):
#    default_view = 'hello'
#
#    @expose('/hello/')
#    @has_access
#    def hello(self):
#        return 'Hello World!'
#
#    @expose('/message/<string:msg>')
#    @has_access
#    def message(self, msg):
#        msg = 'Hello %s' % (msg)
#        return msg
#
#appbuilder.add_view_no_menu(MyView())

class MyView(BaseView):
    default_view = 'hello'

    @expose('/hello/')
    @has_access
    def hello(self):
        return 'Hello World!'

    @expose('/message/<string:msg>')
    @has_access
    def message(self, msg):
        msg = 'Hello %s' % (msg)
        return msg

    @expose('/welcome/<string:msg>')
    @has_access
    def welcome(self, msg):
        msg = 'Hello %s' % (msg)
        return self.render_template('index.html',msg = msg)



#from flask_appbuilder import ModelView
#from .models import ContactGroup, Contact
#from app import appbuilder, db
#
#class ContactModelView(ModelView):
#    datamodel = SQLAInterface(Contact)
#
#    label_columns = {'contact_group':'Contacts Group'}
#    list_columns = ['name','personal_cellphone','birthday','contact_group']
#
#    show_fieldsets = [
#                        (
#                            'Summary',
#                            {'fields':['name','address','contact_group']}
#                        ),
#                        (
#                            'Personal Info',
#                            {'fields':['birthday','personal_phone','personal_cellphone'],'expanded':False}
#                        ),
#                     ]
## 在联系人组视图中，我们使用related_views来关联联系人视图，F.A.B.将自动处理他们之间的关系。
#class GroupModelView(ModelView):
#    datamodel = SQLAInterface(ContactGroup)
#    related_views = [ContactModelView]
#
## 现在我们就差最后一步工作就要完成本次实验了。
## 首先使用db.create_all()根据数据库模型创建表，然后再将视图添加到菜单。
#
#db.create_all()
#appbuilder.add_view(GroupModelView,
#                    "List Groups",
#                    icon = "fa-address-book-o",
#                    category = "Contacts",
#                    category_icon = "fa-envelope")
#appbuilder.add_view(ContactModelView,
#                    "List Contacts",
#                    icon = "fa-address-card-o",
#                    category = "Contacts")


###################
class ContactModelView(ModelView):
    datamodel = SQLAInterface(Contact)

    label_columns = {'contact_group':'Contacts Group'}
    list_columns = ['name','personal_cellphone','birthday','contact_group']

    show_fieldsets = [
                        (
                            'Summary',
                            {'fields':['name','address','contact_group']}
                        ),
                        (
                            'Personal Info',
                            {'fields':['birthday','personal_phone','personal_cellphone'],'expanded':False}
                        ),
                     ]
# 在联系人组视图中，我们使用related_views来关联联系人视图，F.A.B.将自动处理他们之间的关系。
class GroupModelView(ModelView):
    datamodel = SQLAInterface(ContactGroup)
    related_views = [ContactModelView]

# 现在我们就差最后一步工作就要完成本次实验了。
# 首先使用db.create_all()根据数据库模型创建表，然后再将视图添加到菜单。

db.create_all()
appbuilder.add_view(GroupModelView,
                    "List Groups",
                    icon = "fa-apple",
                    category = "Contacts",
                    category_icon = "fa-chrome")
appbuilder.add_view(ContactModelView,
                    "List Contacts",
                    icon = "fa-android",
                    category = "Contacts")

appbuilder.add_view(MyView, "Hello", category='My View')
appbuilder.add_link("Message", href='/myview/message/john', category='My View')
appbuilder.add_link("Welcome", href='/myview/welcome/student', category='My View')
